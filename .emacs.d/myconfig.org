* UI
#+BEGIN_SRC emacs-lisp

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (set-fringe-mode 10)

    (column-number-mode)
    (global-display-line-numbers-mode t)

    (setq display-line-numbers-type 'relative)
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    eshell-mode-hook
                    vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (use-package doom-themes
        :init (load-theme 'doom-gruvbox t))
    (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 100)

    (use-package all-the-icons)

    (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC
#+RESULTS:

* Helm
Not in use
#+BEGIN_SRC text
(use-package helm
  :init
    (require 'helm-config)
    (setq helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t)
  :config
    (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
    (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
    (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
    (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
    (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
    (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
    (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
    (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
    (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
    (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
  :ensure t)
#+END_SRC

* Ivy

  #+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

 (use-package ivy-rich
  :init
  (ivy-rich-mode 1))

  #+END_SRC

* Counsel
  #+BEGIN_SRC emacs-lisp

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp

(use-package which-key
  :config
    (setq which-key-idle-delay 0.5)
    (setq which-key-popup-type 'frame)
    (which-key-mode)
    (which-key-setup-minibuffer)
    (set-face-attribute 'which-key-local-map-description-face nil
       :weight 'bold)
  :ensure t)
#+END_SRC

* ORG
  #+begin_src emacs-lisp
(defun efs/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))   
    
(use-package org
:hook (org-mode . efs/org-mode-setup)
:config
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
(setq org-agenda-files
'("~/Notes/org/tasks.org")))

(require 'org-tempo)

(use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

(use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

  #+end_src
** Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t))) 
#+end_src
* Evil

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
  :config
    (evil-mode 1))


(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

#+END_SRC

* Key-chord

#+BEGIN_SRC emacs-lisp
(use-package key-chord
   :ensure t)
(key-chord-mode 1)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
#+END_SRC

#+RESULTS:
: evil-normal-state

* Docker
  
#+begin_src emacs-lisp
(use-package docker-tramp)
#+end_src

* Random

  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  #+END_SRC

* Term

#+begin_src emacs-lisp
(use-package term
:config (setq explicit-shell-file-name "bash"))

(use-package vterm
  :commands vterm
  :config
  (setq vterm-max-scrollback 10000))
#+end_src

* Projectile
  
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/dev/repos")
    (setq projectile-project-search-path '("~/dev/repos")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src

* Magit
    #+begin_src emacs-lisp
    (use-package magit
    :ensure t)
    #+end_src
    
* Dired
#+begin_src emacs-lisp
    (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "l" 'dired-single-buffer))

    (use-package dired-single)

    (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* CodeCodeCode
** LSP

    #+begin_src emacs-lisp
        (use-package lsp-mode 
            :commands (lsp lsp-deferred)
            :hook (lsp-mode . lsp-enable-which-key-integration)
            :init
               (setq lsp-keymap-prefix "C-c l")
            :config (setq lsp-completion-enable-additional-text-edit nil))

        (use-package lsp-ui)
        (use-package lsp-treemacs)
        (use-package lsp-ivy)

    #+end_src
** DAP

    #+begin_src emacs-lisp
        (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
    #+end_src

** Java

    #+begin_src emacs-lisp
      :init
        (setq lsp-java-vmargs (list "-javaagent:/home/frosse/.m2/repository/org/projectlombok/lombok/1.18.16/lombok-1.18.16.jar"
         ))
(use-package lsp-java 
    :config (add-hook 'java-mode-hook 'lsp))
    (setq lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml")
(setq lsp-java-format-settings-profile "GoogleStyle")
(add-hook 'java-mode-hook (defun my-set-java-tab-width () (setq tab-width 2)))  
    (use-package dap-java :ensure nil)
    #+end_src
* Snippets
    #+begin_src emacs-lisp
        (use-package yasnippet :config (yas-global-mode))
    #+end_src
